{
  "hash": "3dfa4ce9298d453ed923cbc4da880b27",
  "result": {
    "markdown": "---\ntitle: \"Classification\"\nauthor: \"Aadyant Khatri\"\ndate: \"2023-12-02\"\ncategories: [classification, code, analysis, ML]\nimage: \"image.jpeg\"\n---\n\n\n# Classification\n\nIn the vast landscape of machine learning, classification stands tall as a fundamental and powerful technique. It's a predictive modeling method that allows algorithms to learn patterns from labeled data and categorize new, unseen data into predefined classes or categories. From spam email detection to medical diagnosis and sentiment analysis, classification algorithms play a pivotal role in numerous real-world applications.\n\nClassification is a supervised learning technique wherein the algorithm learns from labeled training data to predict the class or category of new, unseen instances. It involves assigning labels or categories to data points based on their features or attributes.\n\n## Types of Classification Algorithms\n\nNumerous algorithms cater to classification tasks, each with its strengths and suitability for different scenarios. Some of the widely used ones include:\n\n### Logistic Regression\n\nLogistic regression estimates the probability (ranging from 0 to 1) of an instance belonging to a specific class, unlike linear regression that predicts continuous values. Achieving this probability estimation involves using the logistic function (sigmoid function).\n\nTo classify instances, logistic regression applies a threshold to these probability scores. For instance, if the probability exceeds 0.5, it assigns the instance to one class; otherwise, it assigns it to the other, establishing a decision boundary.\n\nIn modeling the relationship between features and the logarithm of event odds, logistic regression assigns coefficients to each feature. These coefficients signify the impact of features on the outcome, aiding in understanding feature importance during classification.\nWe'll utilize a dataset containing details about patients susceptible to or not susceptible to strokes. Specifically, we're employing the Stroke Prediction Dataset obtained from Kaggle to conduct predictions. Our objective involves analyzing the patient data within the training set to forecast whether a patient within the evaluation set is prone to experiencing a stroke or not.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_stroke<-read.csv(\"healthcare-dataset-stroke-data.csv\")\nglimpse(df_stroke)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,110\nColumns: 12\n$ id                <int> 9046, 51676, 31112, 60182, 1665, 56669, 53882, 10434…\n$ gender            <chr> \"Male\", \"Female\", \"Male\", \"Female\", \"Female\", \"Male\"…\n$ age               <dbl> 67, 61, 80, 49, 79, 81, 74, 69, 59, 78, 81, 61, 54, …\n$ hypertension      <int> 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1…\n$ heart_disease     <int> 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0…\n$ ever_married      <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No…\n$ work_type         <chr> \"Private\", \"Self-employed\", \"Private\", \"Private\", \"S…\n$ Residence_type    <chr> \"Urban\", \"Rural\", \"Rural\", \"Urban\", \"Rural\", \"Urban\"…\n$ avg_glucose_level <dbl> 228.69, 202.21, 105.92, 171.23, 174.12, 186.21, 70.0…\n$ bmi               <chr> \"36.6\", \"N/A\", \"32.5\", \"34.4\", \"24\", \"29\", \"27.4\", \"…\n$ smoking_status    <chr> \"formerly smoked\", \"never smoked\", \"never smoked\", \"…\n$ stroke            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n```\n:::\n:::\n\n\nOur data glimpse shows that we have 5110 observations and 12 variables.\n\n\n\n\n\nWe can generate several bar graphs to visualize the connections between each of these factors and the target variable, which is the likelihood of a stroke occurrence in the individual.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(data = df_stroke) +geom_bar(mapping = aes(x = gender,fill=stroke))\np2 <-ggplot(data = df_stroke) +geom_bar(mapping = aes(x = hypertension,fill=stroke))\np3 <-ggplot(data = df_stroke) +geom_bar(mapping = aes(x = heart_disease,fill=stroke)) \np4 <-ggplot(data = df_stroke) +geom_bar(mapping = aes(x = ever_married,fill=stroke)) \ngrid.arrange(p1,p2,p3,p4 ,ncol= 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\np5 <- ggplot(data = df_stroke) +geom_bar(mapping = aes(x = work_type,fill=stroke))\np6 <-ggplot(data = df_stroke) +geom_bar(mapping = aes(x = Residence_type,fill=stroke))\np7 <-ggplot(data = df_stroke) +geom_bar(mapping = aes(x = smoking_status,fill=stroke)) \ngrid.arrange(p5,p6,p7 ,ncol= 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\nNow we prepare the training and test sets from the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_stroke <- na.omit(df_stroke)\nn_obs <- nrow(df_stroke)\nsplit <- round(n_obs * 0.7)\ntrain <- df_stroke[1:split,]\n# Create test\ntest <- df_stroke[(split + 1):nrow(df_stroke),]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- logistic_reg(mixture = double(1), penalty = double(1)) %>%\n  set_engine(\"glmnet\") %>%\n  set_mode(\"classification\") %>%\n  fit(stroke ~ ., data = train)\n\n#confusionMatrix(factor(as.list(predict(model, test, type = \"class\"))), factor(test$stroke))\n```\n:::\n\n\n\n### Decision Trees\n\nDecision trees in classification start by selecting the best attribute at each node to divide the data, using measures like Gini impurity or information gain. This recursive process continues until the data is segregated into distinct subsets or meets certain stopping conditions, such as a specified tree depth or a minimum number of samples in a node.\n\nIn the classification process, new data instances navigate through the tree based on their attribute values. As they traverse the branches, they eventually arrive at a leaf node, where the decision tree assigns a predicted class label based on the attributes of the instance.\n\nOne of the advantages of decision trees is their ability to handle both categorical and numerical data. For categorical attributes, decision trees consider all possible outcomes for splitting, while for numerical attributes, the trees choose specific thresholds to partition the data efficiently.\n\n### Random Forest\n\nAn ensemble method comprising multiple decision trees, resulting in robust and accurate predictions.\n\nTo set up the model, we call the randomForest classifier and point it to 'stroke' column for the outcome and provide the 'train' set as input.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_model<-randomForest(formula= stroke~.,data = train)\n```\n:::\n\n\nAfter training the model using the training set, it's essential to assess its performance on comparable data. To achieve this, we'll utilize the test dataset. Let's display the confusion matrix to analyze how effectively our classification model worked when applied to the test data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfusionMatrix(predict(rf_model, test), test$stroke)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   No  Yes\n       No  1470    0\n       Yes    2    0\n                                          \n               Accuracy : 0.9986          \n                 95% CI : (0.9951, 0.9998)\n    No Information Rate : 1               \n    P-Value [Acc > NIR] : 1.0000          \n                                          \n                  Kappa : 0               \n                                          \n Mcnemar's Test P-Value : 0.4795          \n                                          \n            Sensitivity : 0.9986          \n            Specificity :     NA          \n         Pos Pred Value :     NA          \n         Neg Pred Value :     NA          \n             Prevalence : 1.0000          \n         Detection Rate : 0.9986          \n   Detection Prevalence : 0.9986          \n      Balanced Accuracy :     NA          \n                                          \n       'Positive' Class : No              \n                                          \n```\n:::\n:::\n\n\n### Support Vector Machines (SVM)\n\nSVM operates by identifying the hyperplane that maximizes the margin, which is the distance between the hyperplane and the nearest data points of each class, also known as support vectors. This hyperplane, while linear in nature for the basic implementation, aims to create the largest separation between classes, providing robustness in classifying unseen data.\n\nIn its standard form, SVM performs linear classification. However, by using kernel functions like polynomial, radial basis function (RBF), or sigmoid, SVMs can efficiently handle non-linear relationships by transforming the input data into higher-dimensional spaces where the classes become linearly separable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclassifier = svm(formula = stroke ~ ., \n                 data = train, \n                 type = 'C-classification', \n                 kernel = 'linear') \n\nconfusionMatrix(predict(classifier, test), test$stroke)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   No  Yes\n       No  1472    0\n       Yes    0    0\n                                     \n               Accuracy : 1          \n                 95% CI : (0.9975, 1)\n    No Information Rate : 1          \n    P-Value [Acc > NIR] : 1          \n                                     \n                  Kappa : NaN        \n                                     \n Mcnemar's Test P-Value : NA         \n                                     \n            Sensitivity :  1         \n            Specificity : NA         \n         Pos Pred Value : NA         \n         Neg Pred Value : NA         \n             Prevalence :  1         \n         Detection Rate :  1         \n   Detection Prevalence :  1         \n      Balanced Accuracy : NA         \n                                     \n       'Positive' Class : No         \n                                     \n```\n:::\n:::\n\n\n### Neural Networks\n\nNeural networks process data using layers of neurons. The input layer receives data, hidden layers process information, and the output layer produces predictions.\n\nActivation functions add non-linearities to neurons, enabling the model to learn complex data patterns and relationships.\n\nThrough training, neural networks adjust internal parameters (weights and biases) by comparing predicted outputs with actual labels using optimization algorithms like gradient descent.\n\nDeep neural networks, with multiple hidden layers, excel in capturing intricate data features and hierarchies, making them well-suited for handling complex classification tasks.\n\n## Conclusion\n\nIn conclusion, machine learning classification offers diverse tools like SVM, Decision Trees, and Neural Networks, vital for informed decision-making across industries. Understanding these methods and their strengths is crucial for effective use. Challenges like overfitting and data imbalance require careful handling. Mastering these techniques empowers better insights, automation, and innovation in various domains, marking a fundamental aspect of data-driven problem-solving.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}